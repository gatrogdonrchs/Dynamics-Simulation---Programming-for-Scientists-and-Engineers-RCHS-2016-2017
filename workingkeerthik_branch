NB. The verb "require" loads a script, and in this case it loads the 'gl2' script that contains useful graphics verbs
NB. To view the gl2 script, one can execute (open 'gl2') in the ijx window
require 'gl2'
NB. The current locale, which can be viewed by executing (coname''), is the 'base' locale
NB. Each locale has a path, which can be viewed by executing (copath'localename')
NB. The coinsert verb inserts a new locale, the jgl2 locale shared among all branche, and places it right before the z locale 
NB.    along the copath of base
coinsert 'jgl2'

NB. (0 : 0) Will define a name, in this case CANVAS, as a noun (0), and in placing the second 0, will state than any code below
NB.   is part of the definition of that noun until a ) appears.  Similarly 3 : 0 does the same but for a verb.

NB. The verb (pc), short for "parent create," creates a standard parent window, in this case with the name 'canvas'
NB. "minwh" is a wd command that sets the minimum width and height of the standard parent window
NB. A cc, or child class, creates a specific entity in the parental window, of which there are many types
NB. (wd 'cc id isidraw') Creates a widget window which can be acted upon by gl2 commands (graphics commands)
NB. In this case, the widget is named 'canvasisi'

NB. Creates edit windows (a type of child class) with the names of xcord, ycord, xvelo, and yvelo
NB. Creates buttons (a type of child class) with the names of createball, start, and stop
NB. bins are "invisible two-dimensional containers" which can contain child controls or other pins
NB. Widgets are automatically stacked vertically in a bin unless commands such as 'binh" or "binv" are used
NB.  bin z ends a specific bin, in this case the bin with all of the buttons and edits

NB. The wd 'pas' command adjusts the parental size to create margins
NB.   in this case, the left and top margins are both 6, and the right/bottom margins will automatically be
NB.   the same as the left and top margins

CANVAS =: 0 : 0
pc canvas;
minwh 1200 900;
cc canvasisi isidraw;
cc xcord edit;
cc ycord edit;
cc xvelo edit;
cc yvelo edit;
cc createball button;
cc start button;
cc stop button;
cc destroyallballsbutton;
bin z;
bin z; 
pas 6 6;
)

NB. Execute the form
canvas_run =: monad define
NB. The (wd) command sends commands to the windows driver
NB. It's arguments must be separated by semicolons
NB. By running (wd CANVAS), the entire CANVAS noun is run as many arguments sent to the window driver 
wd CANVAS
NB. Displays the current graphics window on the screen
wd 'pshow'
)

NB. Close the window
canvas_close =: monad define
NB. Closes the parent window.  'pclose' is essentially the opposite command of 'pshow'
wd'pclose;'
)

NB. The canvas_cancel verb will do the exact same thing as the canvas_close verb
canvas_cancel =: canvas_close

NB. Dynamics simulation

NB. Widgets
NB. A widget represents a physical object
NB. It has a graphical representation and a mathematical representation

NB. Subclasses of widgets are disks, rectangles, etc.

NB. Sets the locale to the widget locale, under which new widgets can be created and defined
cocurrent 'widget'

NB. Sets the widgetlist to a boxed list with zero boxes
NB. The noun "a:" creates an empty box, so create a list with zero of those empty boxes
widgetlist =: 0$a:

NB. Creates a new widget as part of the widgetlist
create =: verb define
NB. Since widgetlist_widget_ is a boxed list, and coname'' produces the name of the current locale, it adds the name of the 
NB.   current locale as an additional box in that widget list
widgetlist_widget_ =: widgetlist_widget_ , coname''
)

NB. Destroys all widgets
destroy =: verb define
NB. Removes all boxes in widgetlist_widget_ that contain the same name as the current locale name
NB. For example, if the current locale is 'disk' destroy all boxes in widgetlist_widget_ containing the word disk
widgetlist_widget_ =: widgetlist_widget_ -. coname''
NB. Destroys/wipes the current locale
codestroy''
)

NB. Methods common to all widgets
NB. In other words, these verbs are defined in the widget locale and can therefore be run on any type of widget
NB. This is because subsequent locales such as 'disk' will include the widget locale in their copath 

NB. When given an index takes a particular widget in the widgetlist using that index
NB. Ex. If y is "1" takes 1 { widgetlist_widget_, which would be the second widget that was created
getwidget =: verb define
y{(widgetlist_widget_)
)

NB. Sets the velocity to the input value given
setvelocity =: verb define
velocity =: y
)

NB. Output is the velocity value; must be run after setvelocity has been run
getvelocity =: verb define
velocity
)

NB. Sets the position to the input value given
setposition =: verb define
position =: y
)

NB. Output is the position value; must be run after setposition has been run
getposition =: verb define
position
)

NB. Sets the rotation to the input value given
setrotation =: verb define
rotation =: y
)

NB. Sets the angular velocity to the input value given 
setavelocity =: verb define
avelocity =: y
)

NB. Sets the mass to the input value given
setmass =: verb define
mass =: y
)

setgraphrep =: verb define
)


NB. ******************** disks ******************

NB. Changes the current locale to the disk locale
cocurrent 'disk'
NB. Inserts the widget locale into the copath of the 
coinsert 'widget'



create =: verb define
create_widget_ f. y
)
destroy =: verb define
destroy_widget_ f. ''
)

cocurrent 'base'
require 'gl2'
coinsert 'jgl2'

inlocalesc =: 2 : 0
cocurrent =. 18!:4
i =. 18!:5 ''
for_l. n do.
  NB.?lintonly l =. <''
  cocurrent l
  u l_index{y
end.
cocurrent i
''
:
cocurrent =. 18!:4
i =. 18!:5 ''
for_l. n do.
  NB.?lintonly l =. <''
  cocurrent l
  x u l_index{y
end.
cocurrent i
''
)

NB. Execute u in locales n, returning list of results
inlocalesv =: 2 : 0
if. 0=#n do. '' return. end.
cocurrent =. 18!:4
i =. 18!:5 ''
cocurrent {. n
res =. ,: u y
for_l. }.n do.
  NB.?lintonly l =. <''
  cocurrent l
  res =. res , u y
end.
cocurrent i
res
:
if. 0=#n do. '' return. end.
cocurrent =. 18!:4
i =. 18!:5 ''
cocurrent {. n
res =. ,: x u y
for_l. }.n do.
  NB.?lintonly l =. <''
  cocurrent l
  res =. res , x u y
end.
cocurrent i
res
)

canvas_createball_button =: verb define
newball =.	 '' conew 'disk'
setposition__newball (". xcord),(". ycord)
setvelocity__newball ((". xvelo)%50),((". yvelo)%50)
glsel canvasisi
glbrush glrgb 3#196
glpen 2 0 [  glrgb 3#128
glellipse (getposition__newball''),(100 100)
glpaintx''
)

canvas_destroyallballs_button =: verb define
destroy inlocalesv widgetlist_widget_''
glsel canvasisi
glclear''
)

NB. Run a timestep of length y
NB. Update positions & velocities
NB. runstep =: verb define
NB. set up a try/catch at some point
sys_timer =: verb define
cp =: getposition inlocalesv (widgetlist_widget_)''
cv =: getvelocity inlocalesv (widgetlist_widget_)''
setposition inlocalesc widgetlist_widget_ (cp+cv)
try.
glsel canvasisi
glclear''
glbrush glrgb 3#196
glpen 2 0 [  glrgb 3#128
for_objnum. i. 0{($(getposition inlocalesv widgetlist_widget_'')) do.
pos =: (<:objnum){(getposition inlocalesv widgetlist_widget_'')
glellipse pos,(100,100)
end.
glpaintx''
catch.
smoutput 'gl error'
wd 'timer 0'
end.
)

sys_timer_z_ =: sys_timer_base_
canvas_start_button =: verb define
wd 'timer 20'
)

canvas_stop_button =: verb define
wd 'timer 0'
)

NB. When we load this file, create the form if it doesn't exist
wd :: canvas_run 'psel canvas'
